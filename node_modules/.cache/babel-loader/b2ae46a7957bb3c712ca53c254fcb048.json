{"remainingRequest":"/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/babel-loader/lib/index.js!/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cheynehayworth/projects/bbfusedash/dashboard/src/components/Dashboard/Statistic.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cheynehayworth/projects/bbfusedash/dashboard/src/components/Dashboard/Statistic.vue","mtime":1651120114280},{"path":"/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1646000871065},{"path":"/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/babel-loader/lib/index.js","mtime":1649901810314},{"path":"/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1646000871065},{"path":"/Users/cheynehayworth/projects/bbfusedash/dashboard/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1650102991284}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgQ09OVFJBQ1RfQUREUkVTUywgQlVSTl9BRERSRVNTIH0gZnJvbSAiQC9jb25zdGFudHMiOwppbXBvcnQgTWV0YW1hc2tTZXJ2aWNlIGZyb20gIkAvTWV0YW1hc2tTZXJ2aWNlIjsKaW1wb3J0IHsgZXRoZXJzLCB1dGlscyB9IGZyb20gImV0aGVycyI7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICJ2dWV4IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJTdGF0aXN0aWMiLAogIHByb3BzOiB7CiAgICBjb250cmFjdDogewogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAogICAgaHVuZHJlZHRob3VzYW5kbWthdHVzZDogewogICAgICBkZWZhdWx0OiAiLi4uIgogICAgfSwKICAgIHRvdGFsbGlxdWlkaXR5cG9vbHVzZDogewogICAgICBkZWZhdWx0OiAiLi4uIgogICAgfSwKICAgIHRvdGFsYm5iaW5wb29sOiB7CiAgICAgIGRlZmF1bHQ6ICIuLi4iCiAgICB9CiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1rYXRBZGRyZXNzOiBDT05UUkFDVF9BRERSRVNTLAogICAgICBtYXJrZXRDYXA6ICIuLi4iLAogICAgICBjdXJyZW50Q2lyY3VsYXJpbmdCYWxhbmNlOiAiLi4uIiwKICAgICAgY29udHJhY3RCTkJSZXdhcmRQb29sOiAiLi4uIiwKICAgICAgcHJvdmlkZXI6IG51bGwsCiAgICAgIHRvdGFsQnVybjogIi4uLiIsCiAgICAgIHRva2VuU3ltYm9sOiAiIgogICAgfTsKICB9LAoKICBjb21wdXRlZDogeyAuLi5tYXBHZXR0ZXJzKFsic2lnbmVyQWRkcmVzcyJdKSwKICAgIC4uLm1hcEdldHRlcnMoWyJ3YWxsZXRQcm92aWRlclR5cGUiXSkKICB9LAoKICBhc3luYyBtb3VudGVkKCkgewogICAgdGhpcy4kbG9hZGluZyh0cnVlKTsKICAgIHRoaXMubG9hZENvbnRyYWN0SW5mbygpOwogICAgdGhpcy4kbG9hZGluZyhmYWxzZSk7CiAgfSwKCiAgbWV0aG9kczogewogICAgYXN5bmMgbG9hZENvbnRyYWN0SW5mbygpIHsKICAgICAgY29uc29sZS5sb2coInN0YXRpc3RpY3MgbG9hZGluZyIpOwogICAgICBjb25zdCBzZXJ2aWNlID0gbmV3IE1ldGFtYXNrU2VydmljZShhd2FpdCBNZXRhbWFza1NlcnZpY2UuY3JlYXRlV2FsbGV0UHJvdmlkZXJGcm9tVHlwZSh0aGlzLndhbGxldFByb3ZpZGVyVHlwZSkpOwogICAgICBhd2FpdCBzZXJ2aWNlLmluaXRpYWxpemUoKTsKICAgICAgdGhpcy5wcm92aWRlciA9IHNlcnZpY2UuZ2V0V2ViM1Byb3ZpZGVyKCk7CiAgICAgIHRoaXMudG9rZW5TeW1ib2wgPSBhd2FpdCB0aGlzLmNvbnRyYWN0LnN5bWJvbCgpOwogICAgICB0aGlzLm1hcmtldENhcCA9IHBhcnNlRmxvYXQoKGF3YWl0IHRoaXMuY2FsY3VsYXRlTWFya2V0Q2FwKHNlcnZpY2UpKSAqIDEwMCkudG9GaXhlZCgyKTsKICAgICAgdGhpcy50b3RhbEJ1cm4gPSBhd2FpdCB0aGlzLmNhbGN1bGF0ZVRvdGFsQnVyblBlcmNlbnQoc2VydmljZSk7CiAgICAgIHRoaXMuY3VycmVudENpcmN1bGFyaW5nQmFsYW5jZSA9IHBhcnNlRmxvYXQodXRpbHMuZm9ybWF0VW5pdHMoYXdhaXQgdGhpcy5nZXRDdXJyZW50Q2lyY3VsYXJpbmdCYWxhbmNlKCksIDE4KSkudG9GaXhlZCgyKTsKICAgICAgY29uc3QgY2FrZVRva2VuQ29udHJhY3QgPSBhd2FpdCBzZXJ2aWNlLmdldENha2VUb2tlbkNvbnRyYWN0SW5zdGFuY2UoQ09OVFJBQ1RfQUREUkVTUyk7CiAgICAgIHRoaXMuY29udHJhY3RCTkJSZXdhcmRQb29sID0gcGFyc2VGbG9hdCh1dGlscy5mb3JtYXRVbml0cyhhd2FpdCBjYWtlVG9rZW5Db250cmFjdC5iYWxhbmNlT2YoQ09OVFJBQ1RfQUREUkVTUyksIDE4KSkudG9GaXhlZCgyKTsKICAgIH0sCgogICAgYXN5bmMgY2FsY3VsYXRlTWFya2V0Q2FwKHNlcnZpY2UpIHsKICAgICAgY29uc3QgY2lyY3VsYXJpbmdCYWxhbmNlID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50Q2lyY3VsYXJpbmdCYWxhbmNlKCk7CiAgICAgIHJldHVybiB1dGlscy5mb3JtYXRVbml0cyhhd2FpdCBzZXJ2aWNlLmdldE1rYXRWYWx1ZUluQlVTRChjaXJjdWxhcmluZ0JhbGFuY2UpLCAxOCk7CiAgICB9LAoKICAgIGFzeW5jIGNhbGN1bGF0ZVRvdGFsQnVyblBlcmNlbnQoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB0b3RhbCwKICAgICAgICB6ZXJvLAogICAgICAgIGJ1cm4KICAgICAgfSA9IGF3YWl0IHRoaXMuZ2V0Q2lyY3VsYXJpbmdCYWxhbmNlcygpOwogICAgICByZXR1cm4gKCh6ZXJvICsgYnVybikgKiAxMDAgLyB0b3RhbCkudG9GaXhlZCgyKTsKICAgIH0sCgogICAgYXN5bmMgZ2V0Q3VycmVudENpcmN1bGFyaW5nQmFsYW5jZSgpIHsKICAgICAgY29uc3QgewogICAgICAgIHRvdGFsLAogICAgICAgIHplcm8sCiAgICAgICAgYnVybiwKICAgICAgICBkZXYsCiAgICAgICAgZGVwbG95CiAgICAgIH0gPSBhd2FpdCB0aGlzLmdldENpcmN1bGFyaW5nQmFsYW5jZXMoKTsKICAgICAgcmV0dXJuIHRvdGFsLnN1YihidXJuKS5zdWIoemVybyk7CiAgICB9LAoKICAgIGFzeW5jIGdldENpcmN1bGFyaW5nQmFsYW5jZXMoKSB7CiAgICAgIGxldCB0b3RhbCA9IGF3YWl0IHRoaXMuY29udHJhY3QudG90YWxTdXBwbHkoKTsKICAgICAgbGV0IHplcm8gPSBhd2FpdCB0aGlzLmNvbnRyYWN0LmJhbGFuY2VPZigiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIik7CiAgICAgIGxldCBidXJuID0gYXdhaXQgdGhpcy5jb250cmFjdC5iYWxhbmNlT2YoQlVSTl9BRERSRVNTKTsKICAgICAgcmV0dXJuIHsKICAgICAgICB0b3RhbCwKICAgICAgICB6ZXJvLAogICAgICAgIGJ1cm4KICAgICAgfTsKICAgIH0KCiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;AACA;AACA;AACA;AAEA;AACAA,mBADA;AAEAC;AACAC;AACAC;AADA,KADA;AAIAC;AACAD;AADA,KAJA;AAOAE;AACAF;AADA,KAPA;AAUAG;AACAH;AADA;AAVA,GAFA;;AAgBAI;AACA;AACAC,mCADA;AAEAC,sBAFA;AAGAC,sCAHA;AAIAC,kCAJA;AAKAC,oBALA;AAMAC,sBANA;AAOAC;AAPA;AASA,GA1BA;;AA2BAC,cACA,gCADA;AAEA;AAFA,GA3BA;;AA+BA;AACA;AACA;AACA;AACA,GAnCA;;AAoCAC;AACA;AACAC;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA,kDACAC,gEADA,EAEAC,OAFA,CAEA,CAFA;AAIA;AACA,8CACAD,0EADA,EAEAC,OAFA,CAEA,CAFA;AAGA,KAvBA;;AAwBA;AACA;AAEA;AACA,KA5BA;;AA6BA;AACA;AAAAC;AAAAC;AAAAC;AAAA;AACA;AACA,KAhCA;;AAiCA;AACA;AAAAF;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;AACA;AACA,KApCA;;AAqCA;AACA;AACA;AACA;AAEA;AAAAJ;AAAAC;AAAAC;AAAA;AACA;;AA3CA;AApCA","names":["name","props","contract","default","hundredthousandmkatusd","totalliquiditypoolusd","totalbnbinpool","data","mkatAddress","marketCap","currentCircularingBalance","contractBNBRewardPool","provider","totalBurn","tokenSymbol","computed","methods","console","utils","toFixed","total","zero","burn","dev","deploy"],"sourceRoot":"src/components/Dashboard","sources":["Statistic.vue"],"sourcesContent":["<template>\n  <div class=\"statistic-all\">\n    <div class=\"statistic-p1\">\n      <div class=\"row\">\n        <div class=\"item-statistic col-sm-6 col-md-3\">\n          <div class=\"text-1\">Symbol</div>\n          <div class=\"text-2\">{{ tokenSymbol }}</div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-sm-0\">\n          <div class=\"text-1\">Total Supply</div>\n          <div class=\"text-2\">1,000,000,000,000,000 {{ tokenSymbol }}</div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-md-0\">\n          <div class=\"text-1\">Total Burned</div>\n          <div class=\"text-2\">{{ totalBurn }} %</div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-md-0\">\n          <div class=\"text-1\">Token Address</div>\n          <div class=\"text-2\">\n            <a\n              :href=\"`https://explorer.fuse.io/token/${mkatAddress}`\"\n              target=\"_blank\"\n              style=\"color: rgb(5, 0, 111)); font-size: 20px; word-break: break-all\"\n            >\n              view on Fuse Explorer\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"row-2 hide-on-mobile\"></div>\n      <div class=\"row\">\n        <div class=\"item-statistic col-sm-6 col-md-3\">\n          <div class=\"text-1\">Volume (24h)</div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-sm-0\">\n          <div class=\"text-1\">Market Cap</div>\n          <div class=\"text-2\">\n            $\n            <span class=\"card-panel-num\"> {{ marketCap}} </span>\n          </div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-md-0\">\n          <div class=\"text-1\">Current Circulating Supply</div>\n          <div class=\"text-2\">{{ currentCircularingBalance }} {{ tokenSymbol }}</div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-md-0\">\n          <div class=\"text-1\">Rewards</div>\n          <div class=\"text-2\">{{ contractBNBRewardPool }} USDC</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"statistic-p1 mt-25\">\n      <div class=\"row\">\n        <div class=\"item-statistic col-sm-6 col-md-3\">\n          <div class=\"text-1\">10 Bil {{ tokenSymbol }} price</div>\n          <div class=\"text-2\">\n            <span class=\"card-panel-num\">$ {{ hundredthousandmkatusd * 10000000 }} </span>\n          </div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-sm-0\">\n          <div class=\"text-1\">Total Liquidity Pool</div>\n          <div class=\"text-2\">\n            <span class=\"card-panel-num\"> $ {{ totalliquiditypoolusd * 10 }} </span>\n          </div>\n        </div>\n        <div class=\"item-statistic col-sm-6 col-md-3 mt-3 mt-md-0\">\n          <div class=\"text-1\">FUSE in liquidity pool</div>\n          <div class=\"text-2\">{{ totalbnbinpool}} FUSE</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"hidden-input el-input el-input--medium\">\n      <input id=\"copy-value-max\" type=\"text\" autocomplete=\"off\" class=\"el-input__inner\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { CONTRACT_ADDRESS, BURN_ADDRESS } from \"@/constants\";\nimport MetamaskService from \"@/MetamaskService\";\nimport { ethers, utils } from \"ethers\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: \"Statistic\",\n  props: {\n    contract: {\n      default: null,\n    },\n    hundredthousandmkatusd: {\n      default: \"...\",\n    },\n    totalliquiditypoolusd: {\n      default: \"...\",\n    },\n    totalbnbinpool: {\n      default: \"...\",\n    },\n  },\n  data() {\n    return {\n      mkatAddress: CONTRACT_ADDRESS,\n      marketCap: \"...\",\n      currentCircularingBalance: \"...\",\n      contractBNBRewardPool: \"...\",\n      provider: null,\n      totalBurn: \"...\",\n      tokenSymbol: \"\",\n    };\n  },\n  computed: {\n    ...mapGetters([\"signerAddress\"]),\n    ...mapGetters([\"walletProviderType\"]),\n  },\n  async mounted() {\n    this.$loading(true);\n    this.loadContractInfo();\n    this.$loading(false);\n  },\n  methods: {\n    async loadContractInfo() {\n      console.log(\"statistics loading\");\n\n      const service = new MetamaskService(await MetamaskService.createWalletProviderFromType(this.walletProviderType));\n      await service.initialize();\n\n      this.provider = service.getWeb3Provider();\n\n      this.tokenSymbol = await this.contract.symbol();\n\n      this.marketCap = parseFloat(await this.calculateMarketCap(service) * 100).toFixed(2);\n\n      this.totalBurn = await this.calculateTotalBurnPercent(service);\n\n      this.currentCircularingBalance = parseFloat(\n        utils.formatUnits(await this.getCurrentCircularingBalance(), 18)\n      ).toFixed(2);\n\n      const cakeTokenContract = await service.getCakeTokenContractInstance(CONTRACT_ADDRESS);\n      this.contractBNBRewardPool = parseFloat(\n        utils.formatUnits(await cakeTokenContract.balanceOf(CONTRACT_ADDRESS), 18)\n      ).toFixed(2);\n    },\n    async calculateMarketCap(service) {\n      const circularingBalance = await this.getCurrentCircularingBalance();\n\n      return utils.formatUnits(await service.getMkatValueInBUSD(circularingBalance), 18);\n    },\n    async calculateTotalBurnPercent() {\n      const { total, zero, burn } = await this.getCircularingBalances();\n      return (((zero + burn) * 100) / total).toFixed(2);\n    },\n    async getCurrentCircularingBalance() {\n      const { total, zero, burn, dev, deploy } = await this.getCircularingBalances();\n      return total.sub(burn).sub(zero);\n    },\n    async getCircularingBalances() {\n      let total = await this.contract.totalSupply();\n      let zero = await this.contract.balanceOf(\"0x0000000000000000000000000000000000000000\");\n      let burn = await this.contract.balanceOf(BURN_ADDRESS);\n\n      return { total, zero, burn };\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]}]}