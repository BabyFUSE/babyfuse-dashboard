{"remainingRequest":"/Users/cheynehayworth/projects/BabyCake-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cheynehayworth/projects/BabyCake-dashboard/src/pages/Dashboard.vue?vue&type=template&id=f0c5058c&","dependencies":[{"path":"/Users/cheynehayworth/projects/BabyCake-dashboard/src/pages/Dashboard.vue","mtime":1649041419890},{"path":"/Users/cheynehayworth/projects/BabyCake-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1649036669776},{"path":"/Users/cheynehayworth/projects/BabyCake-dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649036669386},{"path":"/Users/cheynehayworth/projects/BabyCake-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1649036669776},{"path":"/Users/cheynehayworth/projects/BabyCake-dashboard/node_modules/vue-loader/lib/index.js","mtime":1649036669290}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}